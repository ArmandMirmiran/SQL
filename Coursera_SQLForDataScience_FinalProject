Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =10000
ii. Business table =10000
iii. Category table =10000
iv. Checkin table =10000
v. elite_years table =10000
vi. friend table = 10000
vii. hours table =10000
viii. photo table = 10000
ix. review table = 1000
x. tip table = 10000
xi. user table =10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (Primary: id)
ii. Hours = 1562 (Foreign: business_id)
iii. Category =2643 (Foreign: business_id)
iv. Attribute = 1115 (Foreign: business_id)
v. Review =10000 (Primary: id)
vi. Checkin = 493 (Foreign: business_id)
vii. Photo = 10000 (Primary)
viii. Tip = 537 (Foreign: user_id)
ix. User = 10000 (Primary: id)
x. Friend = 11 (Foreign : user_id)
xi. Elite_years = 2780 (Foreign: user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	No
	
	SQL code used to arrive at answer:
	
SELECT * FROM user WHERE
 id IS NULL OR
 name IS NULL OR
 review_count IS NULL OR
 yelping_since IS NULL OR
 useful IS NULL OR
 funny IS NULL OR
 cool IS NULL OR
 fans IS NULL OR
 average_stars IS NULL OR
 compliment_hot IS NULL OR
 compliment_more IS NULL OR
 compliment_profile IS NULL OR
 compliment_cute IS NULL OR
 compliment_list IS NULL OR
 compliment_note IS NULL OR
 compliment_plain IS NULL OR
 compliment_cool IS NULL OR
 compliment_funny IS NULL OR
 compliment_writer IS NULL OR
 compliment_photos IS NULL

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:2000		avg:24.2995
		


5. List the cities with the most reviews in descending order:

SELECT Sum(review_count) AS Review, 
       city 
FROM   business 
GROUP  BY city 
ORDER  BY review DESC 
	
	Copy and Paste the Result Below:
	
+--------+-----------------+
| Review | city            |
+--------+-----------------+
|  82854 | Las Vegas       |
|  34503 | Phoenix         |
|  24113 | Toronto         |
|  20614 | Scottsdale      |
|  12523 | Charlotte       |
|  10871 | Henderson       |
|  10504 | Tempe           |
|   9798 | Pittsburgh      |
|   9448 | MontrÃ©al        |
|   8112 | Chandler        |
|   6875 | Mesa            |
|   6380 | Gilbert         |
|   5593 | Cleveland       |
|   5265 | Madison         |
|   4406 | Glendale        |
|   3814 | Mississauga     |
|   2792 | Edinburgh       |
|   2624 | Peoria          |
|   2438 | North Las Vegas |
|   2352 | Markham         |
|   2029 | Champaign       |
|   1849 | Stuttgart       |
|   1520 | Surprise        |
|   1465 | Lakewood        |
|   1155 | Goodyear        |
+--------+-----------------+
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, 
       Count(stars)AS Count_stars 
FROM   business 
WHERE  city = 'Avon' 
GROUP  BY stars 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------------+
| stars | Count_stars |
+-------+-------------+
|   1.5 |           1 |
|   2.5 |           2 |
|   3.5 |           3 |
|   4.0 |           2 |
|   4.5 |           1 |
|   5.0 |           1 |
+-------+-------------+

ii. Beachwood

SQL code used to arrive at answer:


SELECT stars, 
       Count(stars)AS Count_stars 
FROM   business 
WHERE  city = 'Beachwood' 
GROUP  BY stars 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------------+
| stars | Count_stars |
+-------+-------------+
|   2.0 |           1 |
|   2.5 |           1 |
|   3.0 |           2 |
|   3.5 |           2 |
|   4.0 |           1 |
|   4.5 |           2 |
|   5.0 |           5 |
+-------+-------------+	


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT name, 
       review_count 
FROM   user 
ORDER  BY review_count DESC 
LIMIT  3 
		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+


8. Does posing more reviews correlate with more fans?
Yes, but it is dependant on the person
	Please explain your findings and interpretation of the results:
	
	We can create a ratio to show the number of comments required to gain a new fan for each person.
	This ration shows us that certain individuals, such as Amy, almost have a 1:1 return for a fan acquired per comment posted.
	Others, however, require many comments in order to gain a single follower (Ex. Yuri needed to post 17 comments to gain 1 follower).
	Overall, this would suggest that posting more comments would correlate with more fans but it seems to be dependant on the person.
	
	
	+-----------+------+--------------+-----------------+
| name      | fans | review_count | comment_per_fan |
+-----------+------+--------------+-----------------+
| Amy       |  503 |          609 |               1 |
| Mimi      |  497 |          968 |               1 |
| Harald    |  311 |         1153 |               3 |
| Gerald    |  253 |         2000 |               7 |
| Christine |  173 |          930 |               5 |
| Lisa      |  159 |          813 |               5 |
| Cat       |  133 |          377 |               2 |
| William   |  126 |         1215 |               9 |
| Fran      |  124 |          862 |               6 |
| Lissa     |  120 |          834 |               6 |
| Mark      |  115 |          861 |               7 |
| Tiffany   |  111 |          408 |               3 |
| bernice   |  105 |          255 |               2 |
| Roanna    |  104 |         1039 |               9 |
| Angela    |  101 |          694 |               6 |
| .Hon      |  101 |         1246 |              12 |
| Ben       |   96 |          307 |               3 |
| Linda     |   89 |          584 |               6 |
| Christina |   85 |          842 |               9 |
| Jessica   |   84 |          220 |               2 |
| Greg      |   81 |          408 |               5 |
| Nieves    |   80 |          178 |               2 |
| Sui       |   78 |          754 |               9 |
| Yuri      |   76 |         1339 |              17 |
| Nicole    |   73 |          161 |               2 |
+-----------+------+--------------+-----------------+

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
There are more reviews with the word "love" (1780) than "hate" (232)
	
	SQL code used to arrive at answer:
SELECT COUNT(*) AS 'Hate->Love' from review WHERE text LIKE '%love%' UNION
SELECT COUNT(*) AS 'Hate->Love' from review WHERE text LIKE '%hate%'

+------------+
| Hate->Love |
+------------+
|        232 |
|       1780 |
+------------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT name, 
       fans 
FROM   user 
ORDER  BY fans DESC 
LIMIT  10 	
	
	Copy and Paste the Result Below:

	+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
	I selected "Bars" in "Toronto"
	
i. Do the two groups you chose to analyze have a different distribution of hours?


	Yes, the bars with higher reviews tend to have a smaller window of hours opened as well as opening later in the afternoon.

ii. Do the two groups you chose to analyze have a different number of reviews?
         
         No, it seems that all of the businesses have no reviews left on them
		 
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Yes, it would seem that the bars with lower ratings are found in a specific neighbourhood. 
The bars with a higher rating are also found in closer proximety to one another. 
Based on this we could infer that the neighbourhoods with M6H and M6P would be upscale areas of Toronto.

+---------+----------------+----------+--------------+-------------+-------------+------------+-------------+
| city    | Business_Count | category | Review_Count | postal_code | Group_Stars | Open_Hours | Close_Hours |
+---------+----------------+----------+--------------+-------------+-------------+------------+-------------+
| Toronto |              2 | Bars     |            0 | M4K 1P7     | 2-3         | 10         | 02          |
| Toronto |              5 | Bars     |            0 | M4K 1P7     | 2-3         | 11         | 02          |
| Toronto |              2 | Bars     |            0 | M6H 1V5     | 4-5         | 11         | 21          |
| Toronto |              4 | Bars     |            0 | M6H 1V5     | 4-5         | 15         | 21          |
| Toronto |              3 | Bars     |            0 | M6P 1A6     | 4-5         | 16         | 02          |
| Toronto |              4 | Bars     |            0 | M6P 1A6     | 4-5         | 18         | 02          |
+---------+----------------+----------+--------------+-------------+-------------+------------+-------------+

SQL code used for analysis:

SELECT city, 
       Count(business.id) AS Business_Count, 
       category.category, 
       Count(review.id)   AS Review_Count, 
       postal_code, 
       ( CASE 
           WHEN business.stars BETWEEN 2 AND 3 THEN '2-3' 
           WHEN business.stars BETWEEN 4 AND 5 THEN '4-5' 
           ELSE '1 or less' 
         END )            AS Group_Stars, 
       ( CASE 
           WHEN hours LIKE '%onday%' THEN Replace( 
           Substr(Substr(hours, 8, 20), 1, 2), 
                                          ':' 
                                          , '') 
           WHEN hours LIKE '%uesday%' THEN Replace( 
           Substr(Substr(hours, 9, 20), 1, 2), 
                                           ':', '') 
           WHEN hours LIKE '%ednesday%' THEN Replace( 
           Substr(Substr(hours, 11, 20), 1, 2), 
                                             ':', '') 
           WHEN hours LIKE '%hursday%' THEN Replace( 
           Substr(Substr(hours, 10, 20), 1, 2) 
                                            , 
                                            ':', '') 
           WHEN hours LIKE '%riday%' THEN Replace( 
           Substr(Substr(hours, 8, 20), 1, 2), 
                                          ':' 
                                          , '') 
           WHEN hours LIKE '%aturday%' THEN Replace( 
           Substr(Substr(hours, 10, 20), 1, 2) 
                                            , 
                                            ':', '') 
           WHEN hours LIKE '%unday%' THEN Replace( 
           Substr(Substr(hours, 8, 20), 1, 2), 
                                          ':' 
                                          , '') 
           ELSE 'others' 
         END )            AS Open_Hours, 
       ( CASE 
           WHEN hours LIKE '%onday%' THEN Substr(Replace(Substr(Substr(hours, 8, 
                                                                20), 
                                                         -5, 
                                                         5), '-', '0'), 1, 2) 
           WHEN hours LIKE '%uesday%' THEN Substr(Replace(Substr(Substr(hours, 9 
                                                                 , 20), 
                                                          -5 
                                                          , 5), '-', '0'), 1, 2) 
           WHEN hours LIKE '%ednesday%' THEN Substr(Replace(Substr( 
                                                    Substr(hours, 11, 20 
                                                    ), 
                                                            -5, 5), '-', '0'), 1 
                                             , 2) 
           WHEN hours LIKE '%hursday%' THEN Substr(Replace(Substr( 
                                                   Substr(hours, 10, 20) 
                                                           , 
                                                           -5, 5), '-', '0'), 1, 
                                            2) 
           WHEN hours LIKE '%riday%' THEN Substr(Replace(Substr(Substr(hours, 8, 
                                                                20), 
                                                         -5, 
                                                         5), '-', '0'), 1, 2) 
           WHEN hours LIKE '%aturday%' THEN Substr(Replace(Substr( 
                                                   Substr(hours, 10, 20) 
                                                           , 
                                                           -5, 5), '-', '0'), 1, 
                                            2) 
           WHEN hours LIKE '%unday%' THEN Substr(Replace(Substr(Substr(hours, 8, 
                                                                20), 
                                                         -5, 
                                                         5), '-', '0'), 1, 2) 
           ELSE 'others' 
         END )            AS Close_Hours 
FROM   business 
       LEFT JOIN hours 
         ON business.id = hours.business_id 
       LEFT JOIN review 
              ON business.id = review.business_id 
       LEFT JOIN category 
         ON business.id = category.business_id 
WHERE  city = 'Toronto' 
       AND category = 'Bars' 
GROUP  BY group_stars, 
          open_hours 
HAVING group_stars <> '1 or less' 

		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed?
 List at least two differences and the SQL code you used to arrive at your answer.
		
+-----------------+---------+-----------------+---------------+
| Number_Business | is_open | Average_reviews | Average_stars |
+-----------------+---------+-----------------+---------------+
|            1520 |       0 |   23.1980263158 | 3.52039473684 |
|            8480 |       1 |   31.7570754717 | 3.67900943396 |
+-----------------+---------+-----------------+---------------+		
		
i. Difference 1:
         The first difference between businesses that are open is that they tend to have, on average, a higher number of reviews (32 vs 23).
         
ii. Difference 2:
         The second difference between businesses that are open is that they tend to have, on average, a higher number of stars (3.6 vs 3.5).
         
         
SQL code used for analysis:

SELECT Count(id) AS Number_Business, 
       is_open, 
       Avg(review_count) AS Average_reviews, 
       Avg(stars)        AS Average_stars 
FROM   business 
GROUP  BY is_open 
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         I this analysis, I see to identify if a business' rating can be attributed to when individuals will be checking in.

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
         This analysis only runs for businesses found in OH (limited data available). 
		 From the results we see that businesses with low rating are rarely visited while businesses with medium ratings are the most visited.
		 Interestingly, those businesses with 2-3 stars tend to be visited the most during Saturday and Sunday (unable to say if this is due to their cateogyr due to the limited data).
		 What we do notice is that businesses with 4-5 stars tend to have visits fairly well distributed over the entire week. This sentence is to be used for Coursera submissions-> it's presence means this answer was plagiarized from GitHub.
		 One of the key findings from this is that we could suggest businesses in the 2-3 star category to attempt to promote execptional work ethic/customer service on Saturdays and Sundays in hopes to sway as many individuals to increase the rating.
		 Once a business finds itself in the 4-5 star rating however, customer service must be consistent throughout the week.
                           
                  
iii. Output of your finished dataset:
+-------+--------------+-------------+-----------+------------+
| state | Num_Checkins |    category | Weekday   | Star_group |
+-------+--------------+-------------+-----------+------------+
| OH    |            1 |        None | Friday    | 1 or less  |
| OH    |            1 |        None | Saturday  | 1 or less  |
| OH    |            7 | Restaurants | Sunday    | 1 or less  |
| OH    |            2 |        None | Thursday  | 1 or less  |
| OH    |            3 | Restaurants | Wednesday | 1 or less  |
| OH    |          133 |        None | Friday    | 2-3        |
| OH    |          119 |        None | Monday    | 2-3        |
| OH    |          279 |        None | Saturday  | 2-3        |
| OH    |          317 |        None | Sunday    | 2-3        |
| OH    |          109 |        None | Thursday  | 2-3        |
| OH    |           64 |        None | Tuesday   | 2-3        |
| OH    |          125 |        None | Wednesday | 2-3        |
| OH    |           24 |        None | Friday    | 4-5        |
| OH    |           22 |        None | Monday    | 4-5        |
| OH    |           32 |        None | Saturday  | 4-5        |
| OH    |           28 |        None | Sunday    | 4-5        |
| OH    |           18 |        None | Thursday  | 4-5        |
| OH    |           19 |        None | Tuesday   | 4-5        |
| OH    |           21 |        None | Wednesday | 4-5        |
+-------+--------------+-------------+-----------+------------+
iv. Provide the SQL code you used to create your final dataset:

SELECT state, 
       Sum(count) AS Num_Checkins, 
       category, 
       ( CASE 
           WHEN checkin.date LIKE 'Monday%' THEN 'Monday' 
           WHEN checkin.date LIKE 'Tuesday%' THEN 'Tuesday' 
           WHEN checkin.date LIKE 'Wednesday%' THEN 'Wednesday' 
           WHEN checkin.date LIKE 'Thursday%' THEN 'Thursday' 
           WHEN checkin.date LIKE 'Friday%' THEN 'Friday' 
           WHEN checkin.date LIKE 'Saturday%' THEN 'Saturday' 
           WHEN checkin.date LIKE 'Sunday%' THEN 'Sunday' 
           ELSE 'Other' 
         END )    AS Weekday, 
       ( CASE 
           WHEN stars < 2 THEN '1 or less' 
           WHEN stars >= 2 
                AND stars < 4 THEN '2-3' 
           WHEN stars >= 4 THEN '4-5' 
           ELSE stars 
         END )    AS Star_group 
FROM   business 
       LEFT JOIN checkin 
              ON business.id = checkin.business_id 
       LEFT JOIN hours 
              ON business.id = hours.business_id 
       LEFT JOIN category 
              ON business.id = category.business_id 
WHERE  weekday <> 'Other' 
GROUP  BY star_group, 
          weekday 
